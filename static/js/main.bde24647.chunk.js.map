{"version":3,"sources":["images/loading.gif","api-caller.js","location-form.js","weather-display.js","index.js"],"names":["module","exports","generateGeocodingURL","location","query","encodeURI","generateWeatherURL","lat","lng","fetchLocationData","a","url","fetch","then","response","json","data","console","log","results","fetchWeatherData","geometry","weatherData","LocationForm","props","state","handleSubmit","bind","handleChange","id","onSubmit","this","type","onChange","name","placeholder","value","event","getData","preventDefault","setState","target","React","Component","DAYS","WeatherDisplay","units","timeFrame","Location","locationData","CurrentWeather","current","daily","map","dayWeather","info","components","className","city","country","src","iconUrl","weather","icon","alt","printTemp","temp","description","date","Date","dt","key","getDate","getDay","substring","day","night","iconId","Math","floor","App","loading","class","loadingImg","apiData","badLocation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bde24647.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.399cf215.gif\";","const WEATHERKEY = \"3e81ce2f6403ab0898bbba96bb2ed63d\";\nconst GEOCODEKEY = \"3ee4ea507c174d90850ab5cd219ced08\";\n\n\n\nfunction generateGeocodingURL(location) {\n\tconst query = encodeURI(location);\n\treturn (\n\t\t`https://api.opencagedata.com/geocode/v1/json?q=${query}` +\n\t\t`&key=${GEOCODEKEY}`\n\t);\n}\n\nfunction generateWeatherURL({lat, lng}) {\n\treturn (\n\t\t`https://api.openweathermap.org/data/2.5/onecall?` +\n\t\t`lat=${lat}&lon=${lng}` + \n\t\t`&exclude=minutely` +\n\t\t`&appid=${WEATHERKEY}` +\n\t\t`&units=imperial`\n\t);\n}\n\n\nexport async function fetchLocationData(location){\n\tconst url = generateGeocodingURL(location)\n\tconst data = await fetch(url).then(response => response.json());\n\tconsole.log(data);\n\treturn data.results[0];\n}\n\nexport async function fetchWeatherData(geometry) {\n\tconst url = generateWeatherURL(geometry);\n\tconst weatherData = await fetch(url).then((response) => response.json());\n\tconsole.log(weatherData);\n\treturn weatherData;\n}\n","import React from \"react\";\n\nexport class LocationForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form id=\"search\" onSubmit={this.handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tname=\"location\"\n\t\t\t\t\tplaceholder=\"Location\"\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\" value=\"\" />\n\t\t\t</form>\n\t\t);\n\t}\n\n\thandleSubmit(event) {\n\t\tthis.props.getData(this.state.location);\n\t\tevent.preventDefault();\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({ location: event.target.value });\n\t}\n}\n","import React from \"react\";\n\nconst DAYS = [\n\t\"Sunday\",\n\t\"Monday\",\n\t\"Tuesday\",\n\t\"Wednesday\",\n\t\"Thursday\",\n\t\"Friday\",\n\t\"Saturday\",\n];\n\nexport class WeatherDisplay extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { units: \"imperial\", timeFrame: \"current\" };\n\t}\n\trender() {\n\t\tconst weatherData = this.props.data.weatherData;\n\t\treturn (\n\t\t\t<div id=\"weather-display\">\n\t\t\t\t<Location data={this.props.data.locationData} />\n\t\t\t\t<CurrentWeather data={weatherData.current} />\n\t\t\t\t<div id=\"forecast-week\">\n\t\t\t\t\t{weatherData.daily.map(dayWeather)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Location(props) {\n\tconst info = props.data.components;\n\treturn (\n\t\t<div id=\"location\">\n\t\t\t<div className=\"city\">{info.city}</div>\n\t\t\t<div className=\"state\">{info.state}</div>\n\t\t\t<div className=\"country\">{info.country}</div>\n\t\t</div>\n\t);\n}\n\nfunction CurrentWeather(props) {\n\treturn (\n\t\t<div id=\"current-weather\">\n\t\t\t<img src={iconUrl(props.data.weather[0].icon)} alt=\"\" />\n\t\t\t<div className=\"info\">\n\t\t\t\t<div className=\"temp\">{printTemp(props.data.temp) + \"F\"}</div>\n\t\t\t\t<div className=\"description\">\n\t\t\t\t\t{props.data.weather[0].description}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction dayWeather(data) {\n\tconst date = new Date(data.dt * 1000);\n\treturn (\n\t\t<div className=\"day\" key={date.getDate()}>\n\t\t\t<div className=\"title\">{DAYS[date.getDay()].substring(0, 3)}</div>\n\t\t\t<img src={iconUrl(data.weather[0].icon)} alt=\"\" />\n\t\t\t<div>\n\t\t\t\t<span className=\"temp-day\">{printTemp(data.temp.day)}</span>\n\t\t\t\t<span className=\"temp-night\">{printTemp(data.temp.night)}</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction iconUrl(iconId) {\n\treturn `http://openweathermap.org/img/wn/${iconId}@2x.png`;\n}\n\nfunction printTemp(temp) {\n\treturn Math.floor(temp) + \"\\u00B0\";\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { fetchWeatherData, fetchLocationData } from \"./api-caller.js\";\nimport { LocationForm } from \"./location-form.js\";\nimport { WeatherDisplay } from \"./weather-display.js\";\n\nimport \"./style.css\";\nimport loadingImg from \"./images/loading.gif\";\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { loading: false };\n\t\tthis.getData = this.getData.bind(this);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<LocationForm getData={this.getData} />\n\t\t\t\t{this.state.loading ? (\n\t\t\t\t\t<img class=\"loading\" src={loadingImg} alt=\"\" />\n\t\t\t\t) : this.state.apiData ? (\n\t\t\t\t\t<WeatherDisplay data={this.state.apiData} />\n\t\t\t\t) : this.state.badLocation ? (\n\t\t\t\t\t<div id=\"location-not-found\">Location not found.</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tasync getData(location) {\n\t\tthis.setState({ loading: true });\n\t\ttry {\n\t\t\tconst locationData = await fetchLocationData(location);\n\t\t\tconst weatherData = await fetchWeatherData(locationData.geometry);\n\t\t\tthis.setState({\n\t\t\t\tapiData: { weatherData, locationData },\n\t\t\t\tloading: false,\n\t\t\t\tbadLocation: false,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.setState({ loading: false, apiData: null, badLocation: true });\n\t\t}\n\t}\n}\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}